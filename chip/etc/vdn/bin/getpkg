#!/bin/bash
source /etc/vdn/include/vdn.lib
# ====================================================================================
# = Filename:  /bin/getpkg                                                           =
# =                                                                                  =
# = Script to Retreive a vdn package or Restore a Node Backup File                   =
# =                                                                                  =
# = Usage: ${getpkg} [-dr:x] [FIRMWARE]...                                           =
# =   -h            Display this help and exit.                                      =
# =   -d            Set .debug flag in /etc/ for Developer Mode                      =
# =   -r            Restore a Previous Node Backup                                   = 
# =   -x            Exit / Remove the .debug flag                                    =
# =                                                                                  =
# = by: Loren Ristola, N4LDR                                                         =
# ====================================================================================

#
# Initialize our own variables:

OPTIND=1 # Reset
server="vdn-services"
node_firmware="VDN_CHIP_$ver"
debugVer="debug-$node_firmware"
installed_patch_ver=$(cat "/etc/vdn-release")
nodeName=`uname -n`"_"`date +"%Y%m%d_%H%M.sav"`
debug=0
reries=0
input_file=""

#
# Sub-Routines
#


backupNode()
{
# Create filename for misisng files to prevent backup error msgs.
[ -f /etc/latlon ] && echo "Lat/Lon file Exists, backing up." || touch /etc/latlon
[ -f /etc/gridsquare ] && echo "GridSquare file Exists, backing up." || touch /etc/latlon 

### Backup any customized settings  
tar cf /tmp/$nodeName -C/ -T/etc/vdn/vdnpkglist   
printf "\nUploading $nodeName to $server\n" 
curl -y30 -n#T /tmp/$nodeName ftp://$server:/node-backups/ 
rm /tmp/*.sav
}



restoreBuild()
{
if [ "$installed_patch_ver" == "$input_file" ]; then
   printf "\nLatest Version [%s] is Installed - No need to Update.\n" $input_file
   printf "Exiting...\n"
   exit
else
   printf "\nInstalled Version = $installed_patch_ver\n"
   printf "FTP Version       = $input_file\n\n"
   backupNode

   printf "\nInstalling $input_file\n\n"
   curl -no /tmp/$input_file ftp://$server/$input_file
   tar xf /tmp/$input_file -C /
   rm -r /tmp/*.bin

# Write vdn-release version file.

   echo $input_file > /etc/vdn-release
  banner
  exit
fi
}


restoreBackup()
{
nodeName=`uname -n`
dst='/tmp'
echo -e "${GREEN}*** Retrieving Available Backup Files for Node: ${RED}$nodeName${NORMAL} ***"
set -- `curl -snl ftp://$server/node-backups/ | grep "^$nodeName"`
echo

i=0
for file; do
  i=$(($i + 1))
  printf "%3d - %s\n" $i $file
done
echo ""

read -p "Select file # to Restore: " n
until test 0 -lt "$n" -a "$n" -le "$i" ; do
  echo "Value is not in range (1 - $i) - try again!"
  read -p "Select file # to Restore: " n
done

i=0
for file; do
  i=$(($i + 1))
  test "$n" -eq "$i" && break
done
echo ""
echo "File: $file"

   printf "\nInstalling $file\n\n"
   curl -no /tmp/$file ftp://$server/node-backups/$file

   tar xf /tmp/$file -C /
   rm -r /tmp/*.sav

# Write vdn-release version file.

   echo $file > /etc/vdn-release
banner

exit 0
}




show_help() {
echo
echo -e "${TITLE}Usage:${CYAN}${0##*/}${NORMAL} [-hdrx] ...." 
echo -e "${DESCRIPTION}Get Package from vdn-services and update node.${NORMAL} "
echo -e "    -h            Display this help and exit."
echo -e "    -d            Set .debug flag in /etc/ for Developer Mode. "
echo -e "    -r            Restore a Previous Node Backup. "
echo -e "    -x            Exit / Remove the .debug flag.  "
echo -e ${NORMAL}

}

while getopts "hdrx" opt; do
    case "$opt" in
        h)
            show_help
            exit 0
            ;;
        d)  touch /etc/.debug
            debug=$((debug+1))
	    ;;
        r)  restoreBackup
	    echo 0
            ;;
        x)  rm /etc/.debug
            debug=0
	    ;;    
        '?')
            show_help >&2
            exit 1
            ;;
    esac
done

shift "$((OPTIND-1))" # Shift off any remaining switches --.

clear
checkServer

if [ $debug == "1" ] || [ -f /etc/.debug ]; then
   input_file="`curl -snl ftp://$server/ | grep "^$debugVer-"`"
else
   input_file="`curl -snl ftp://$server/ | grep "^$node_firmware"`"
fi

restoreBuild



#!/bin/bash
source /etc/vdn/include/ansi.c
server="vdn-services"

backupNode()
{
# Create filename for misisng files to prevent backup error msgs.
[ -f /etc/latlon ] && echo "Lat/Lon file Exists, backing up." || touch /etc/latlon
[ -f /etc/gridsquare ] && echo "GridSquare file Exists, backing up." || touch /etc/latlon 

### Backup any customized settings  
tar cf /tmp/$nodeName -C/ -T/etc/vdn/vdnpkglist   
printf "\nUploading $nodeName to $server\n" 
curl -y30 -n#T /tmp/$nodeName ftp://$server:/node-backups/ 
rm /tmp/*.sav
}

buildPkg()
{
# Build normal package
checkVersion

   printf "Building package for nodes with firmware=$node_firmware\n"
   output_file=$(date +"$node_firmware-%Y%m%d_%H%M.bin")
   oldfile=`curl -snl ftp://$server/ | grep "^$node_firmware"`
   echo `date +$node_firmware-%Y%m%d_%H%M.bin` > /etc/vdn-release


   printf "Using VDN Package List\n"
   tar cf /tmp/$output_file -C/ -T/etc/vdn/vdnpkglist
   touch /tmp/.updated 

   curl -sn ftp://$server/ -X 'DELE '$oldfile
   curl -sn#T /tmp/$output_file ftp://$server/
   curl -sn#T /tmp/.updated ftp://$server/

   rm /tmp/*.bin
   rm /tmp/.updated

printf "Filename $output_file has been transferred to $server\n" 
}

# =======================                                                         
# Function cleanNode                                                            
# =======================                                                         
cleanNode()                                                                         
{          
fs=$(wc -c < /etc/vdn/junkfiles)
                                    
if [ -f "/etc/vdn/junkfiles" ]; then              
   if [ $fs == 45 ]; then                         
      printf "Nothing to Do !\n"
      exit 0                  
   else                                               
      echo -e "${G}Searching for ${R}Junk Files${N}\n"                        
      while read name                                                         
       do                                                                     
         echo -e "FileName = $name"             
         rm -rf $name                           
       done < /etc/vdn/junkfiles                                                   
         rm /etc/vdn/junkfiles                                                     
      printf "# Add Filename with full path to be removed.\n" > /etc/vdn/junkfiles  
   fi                                                                         
else                                                                          
  printf "# Add Filename with full path to be removed.\n" > /etc/vdn/junkfiles
  exit 0                                                                      
fi
}


# =======================
# Function copyFTP
# =======================
copyFTP()
{
 
# rm ~/.netrc
 filename=$(basename $1)
 destination="$2"

 curl -Sy30 -n -#T $filename $destination

if [ $? -eq 0 ]; then
logMessage "Successfully transfered $filename  "  
else
  logMessage " Error $? / Failed to transfer $filename  "
fi
return
}


# =====================
# Function curlCheck()
# =====================
checkCurl()                                                                             
{                                                                                       
 logMessage " Request: Verifying Curl Installation "
 # If libraries are not present, download & install (ex. Curl)                          

if [ ! -f "/usr/bin/curl" ]; then                                                       
   logMessage "Curl was NOT Installed | curlCheck "

   printf "${CYAN}Curl ${GREEN}is ${RED}NOT ${GREEN}installed - Installing Now !\n"                                    
   opkg update                                                                          
   opkg list | grep -v '^ ' | cut -f1,3 -d ' ' | gzip -c > /etc/opkg.list.gz            
   opkg install curl  
fi

if [ -f "/usr/bin/curl" ]; then
   printf "${CYAN}Curl ${GREEN}[ INSTALLED ]${NORMAL}\n"
else
   
logMessage "Automatic installation of Curl Failed ! | checkCurl " 

   return 1
fi                                                                                      

}                                                    


# ==================
# Function checkFTP
# ==================
checkFTP()
{
logMessage " Request: Verifying FTP Credentials "
if [ ! -e ~/.netrc ]; then                                                                    
   logMessage ".netrc file did not exist ! | checkFTP "

         touch ~/.netrc
         chmod 700 ~/.netrc
         server="vdn-services"
         echo "machine $server login mesh-node password aredn" >> ~/.netrc
fi

if [ -e ~/.netrc ]; then
         printf "${CYAN}FTP ${GREEN}[ AVAILABLE ]${NORMAL}\n"
else
	 PRINTF "${CYAN}FTP ${RED} [ NOT AVAILABLE ]${NORMAL}\n"
   logMessage ".netrc Failed to be Automatically Created ! | checkFTP "                                                        
         return 1
fi             
}


# ========================
# Function checkServers()
# ========================
checkServer()                                                                           
{                                                                                       

printf "${GREEN}Checking Server Functions...${NORMAL}\n"

checkCurl                                                                               
checkFTP

#Make sure OLSRD is running else abort.                                     
                                                                           
if [ ! -e /var/run/hosts_olsr ]; then                                       
  printf "OLSRD ${RED}[ NOT RUNNING ]${NORMAL}\n"                          
  logMessage "OLSRD is not running! | checkServer "                                                        
  return 1                                                                                               
else 
  printf "${CYAN}OLSRD ${GREEN}[ IS RUNNING ]${NORMAL}\n"
fi           

hostStatus=$(cat /etc/hosts | grep -n $server)
                                                      
if [ $? -eq 0 ]; then                                 

  printf "${CYAN}HOST Entry ${NORMAL}$server ${GREEN}[ FOUND ]${NORMAL}\n"      

else                                                  
 
 printf "${CYAN}HOST Entry ${NORMAL}$server ${RED}[ NOT FOUND ]${NORMAL}\n"

 findServer                                                              

fi                                                    

}                                      


# ======================
# Function checkVersion
# ======================
checkVersion()
{
logMessage " Request: Compairing installed package with server. "

OPTIND=1 # Reset
server="vdn-services"
ver="1.0"
node_firmware="VDN_CHIP_$ver"
debugVer="debug-$node_firmware"
installed_patch_ver=$(cat "/etc/vdn-release")
nodeName=`uname -n`"_"`date +"%Y%m%d_%H%M.sav"`
debug=0
reries=0
input_file=""

checkServer

if [ $debug == "1" ] || [ -f /etc/.debug ]; then
   input_file="`curl -snl ftp://$server/ | grep "^$debugVer-"`"
else
   input_file="`curl -snl ftp://$server/ | grep "^$node_firmware"`"
fi
}



# ====================
# Function findServer
# ====================
findServer()
{
logMessage " Request: Finding the nearest server. "
bestping=10000
servername="none"

printf "\n${UNDERLINE}${MAGENTA}Finding the Closest Server${NORMAL}\n\n" 
cat /etc/vdn/serverlist | while IFS='' read -r line || [[ -n "$LINE" ]]; 

do
printf "Testing Server ${CYAN}$line "
testping=$(ping -c 1 $line 2>&1 | grep -c "time")

if [ $? -eq 0 ]; then 
   ipAddress=$(ping -c 1 $line | awk -F" |:" '/from/{print $5}' | cut -d "(" -f2 | cut -d ")" -f1 )
   pingtime=$(ping -c 1 $line | awk -F '/' 'END {print $5}' |  awk '{printf("%d\n",$1 + 0.5)}' )
   printf "${YELLOW}$ipAddress ${GREEN} [ FOUND ]${NORMAL}\n" 
   printf "${BLUE}Ping Time ${NORMAL}= ${CYAN}$pingtime${NORMAL}\n\n"             
                                                                                  
   if [ "$pingtime" -lt "$bestping" ]; then                                       
      bestping=$pingtime                                                          
      echo "$ipAddress vdn-services #$line" > /tmp/.bestserver
   fi

else
  printf "${RED} [ NOT FOUND ]${NORMAL}\n"
  logMessage "Server $line was not Found! | findServer "
fi

done

      printf "Updating hosts file... \n"                                                                                                  
      echo "# Created by VDN Scripts - Do Not Edit !" > /etc/hosts.user     
      cat /tmp/.bestserver >> /etc/hosts.user
      systemctl restart dnsmasq

}

# ====================                                                                               
# Function getMacId                                                                                  
# ====================                                                                               
getMacId()                                                                                           
{                                                                                                    
macid=`ifconfig wlan1 | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'`                       
printf "$macid\n"                                                                                      
}                                                                                                    
                                                                                                     

# ====================                                                                               
# Function getNodeId                                                                                  
# ====================                                                                               
getNodeId()                                                                                           
{
nodeId=`uname -n`
printf "$nodeId\n"
}
                                                                                                     

# ======================                                                                               
# Function getTimeStamp                                                                                 
# ======================                                                                               
getTimeStamp()                                                                                          
{
timeStamp=`date +"%Y-%m-%d %H:%M:%S"`
echo $timeStamp
echo
lastUpdate=$(date +"%Y-%m-%d %H:%M:%S")                                                       
nodeName=`uname -n`
}


# ======================
# Function getPkg
# ======================
getPkg()
{
checkVersion
restoreBuild
}


# ====================                                                                              
# Function logMessage                                                                               
# ====================                                                                              
logMessage()                                                                                        
{        
macid=$(getMacId)

if [ ! -f "/tmp/$macid.log" ]; then
  touch /tmp/$macid.log
fi

# Lets Verify the log isn't getting huge

tail -n600 /tmp/$macid.log > /tmp/$macid.temp; mv /tmp/$macid.temp /tmp/$macid.log

printf "<event>\n"                                     >> /tmp/$macid.log
printf "\t<macId>$(getMacId)</macId>\n"                >> /tmp/$macid.log
printf "\t<nodeName>$(getNodeId)</nodeName>\n"         >> /tmp/$macid.log   
printf "\t<timeStamp>$(getTimeStamp)</timeStamp>\n"    >> /tmp/$macid.log
printf "\t<logMsg>$1</logMsg>\n"                       >> /tmp/$macid.log
printf "</event>\n"                                    >> /tmp/$macid.log
return
}            



# =======================                                                                            
# Function pushSettings                                                                             
# =======================                                                                            
pushSettings()                                                                                      
{      
logMessage " Request: pushSettings was called "

checkVersion
findServer
                                                      
#Script to run automated sql queries
macid=$(getMacId)

    # Get Node Values and parse to XML

perl /www/cgi-bin/info.settings > /tmp/settings_$macid.xml
perl /www/cgi-bin/info.interfaces > /tmp/interfaces_$macid.xml
perl /www/cgi-bin/info.localhosts > /tmp/localhosts_$macid.xml
perl /www/cgi-bin/info.links > /tmp/links_$macid.xml

    # Push XML Files to Servers

copyFTP "/tmp/settings_$macid.xml" "ftp://$server:/nodes/"            
copyFTP "/tmp/interfaces_$macid.xml" "ftp://$server:/nodes/"          
copyFTP "/tmp/localhosts_$macid.xml" "ftp://$server:/nodes/"          
copyFTP "/tmp/links_$macid.xml" "ftp://$server:/nodes/"  

touch /tmp/.updated # Set Flag for Server's to Sync
copyFTP "/tmp/.updated" "ftp://$server/nodes/"

# remove XML files in /tmp directory.

rm /tmp/*.xml
rm /tmp/.updated
}


# =======================                                                                            
# Function pushxml                                                                       
# =======================                                                                       
#Script to run automated sql queries
pushxml()                                                                                       
{                

findServer
checkVersion
macid=$(getMacId)

# Wrap the XML for the web service call...
#wrpHeader1="<request><function><name>PostData_Node_"
wrpHeader1="<request><from>$macid</from><function><name>PostData_Node_"
wrpHeader2="</name><parameters><parameter type=\"xml\">"
wrpFooter="</parameter></parameters></function></request>"

echo `echo $wrpHeader1`Settings`echo $wrpHeader2` > /tmp/settings_$macid.xml
echo `echo $wrpHeader1`Interfaces`echo $wrpHeader2` > /tmp/interfaces_$macid.xml
echo `echo $wrpHeader1`Localhosts`echo $wrpHeader2` > /tmp/localhosts_$macid.xml
echo `echo $wrpHeader1`Links`echo $wrpHeader2` > /tmp/links_$macid.xml
echo `echo $wrpHeader1`Wifi`echo $wrpHeader2` > /tmp/wifi_$macid.xml
echo `echo $wrpHeader1`Tunnels`echo $wrpHeader2` > /tmp/tunnels_$macid.xml

# Get Node Values and parse to XML
perl /www/cgi-bin/info.settings >> /tmp/settings_$macid.xml
perl /www/cgi-bin/info.interfaces >> /tmp/interfaces_$macid.xml
perl /www/cgi-bin/info.localhosts >> /tmp/localhosts_$macid.xml
perl /www/cgi-bin/info.links >> /tmp/links_$macid.xml
wifiScan >> /tmp/wifi_$macid.xml
getTunnels >> /tmp/tunnels_$macid.xml

# Wrap the XML for the web service call...
echo $wrpFooter >> /tmp/settings_$macid.xml
echo $wrpFooter >> /tmp/interfaces_$macid.xml
echo $wrpFooter >> /tmp/localhosts_$macid.xml
echo $wrpFooter >> /tmp/links_$macid.xml
echo $wrpFooter >> /tmp/wifi_$macid.xml
echo $wrpFooter >> /tmp/tunnels_$macid.xml

# Send data to web service
curl  --header "Content-Type: text/xml;charset=UTF-8" --header "LOADING_NODE_DATA" --data @/tmp/settings_$macid.xml http://$server/soap/service.php            
curl  --header "Content-Type: text/xml;charset=UTF-8" --header "LOADING_NODE_DATA" --data @/tmp/interfaces_$macid.xml http://$server/soap/service.php            
curl  --header "Content-Type: text/xml;charset=UTF-8" --header "LOADING_NODE_DATA" --data @/tmp/localhosts_$macid.xml http://$server/soap/service.php            
curl  --header "Content-Type: text/xml;charset=UTF-8" --header "LOADING_NODE_DATA" --data @/tmp/links_$macid.xml http://$server/soap/service.php            
curl  --header "Content-Type: text/xml;charset=UTF-8" --header "LOADING_NODE_DATA" --data @/tmp/wifi_$macid.xml http://$server/soap/service.php
curl  --header "Content-Type: text/xml;charset=UTF-8" --header "LOADING_NODE_DATA" --data @/tmp/tunnels_$macid.xml http://$server/soap/service.php

# remove XML files in /tmp directory.

#rm /tmp/*.xml

}

restoreBuild()
{
if [ "$installed_patch_ver" == "$input_file" ]; then
   printf "\nLatest Version [%s] is Installed - No need to Update.\n" $input_file
   printf "Exiting...\n"
   exit
else
   printf "\nInstalled Version = $installed_patch_ver\n"
   printf "FTP Version       = $input_file\n\n"
   backupNode

   printf "\nInstalling $input_file\n\n"
   curl -no /tmp/$input_file ftp://$server/$input_file
   tar xf /tmp/$input_file -C /
   rm -r /tmp/*.bin

# Write vdn-release version file.

   echo $input_file > /etc/vdn-release
  banner
  exit
fi
}


restoreBackup()
{
nodeName=`uname -n`
dst='/tmp'
echo -e "${GREEN}*** Retrieving Available Backup Files for Node: ${RED}$nodeName${NORMAL} ***"
set -- `curl -snl ftp://$server/node-backups/ | grep "^$nodeName"`
echo

i=0
for file; do
  i=$(($i + 1))
  printf "%3d - %s\n" $i $file
done
echo ""

read -p "Select file # to Restore: " n
until test 0 -lt "$n" -a "$n" -le "$i" ; do
  echo "Value is not in range (1 - $i) - try again!"
  read -p "Select file # to Restore: " n
done

i=0
for file; do
  i=$(($i + 1))
  test "$n" -eq "$i" && break
done
echo ""
echo "File: $file"

   printf "\nInstalling $file\n\n"
   curl -no /tmp/$file ftp://$server/node-backups/$file

   tar xf /tmp/$file -C /
   rm -r /tmp/*.sav

# Write vdn-release version file.

   echo $file > /etc/vdn-release
banner

exit 0
}



# =======================                                                                       
# Function wifiScan                                                                        
# =======================                                                                     
wifiScan()                                                                                 
{

/usr/local/bin/./wscan -1 -o | head -n -1 | tail -n +3 > /tmp/vdnScan

while read SIG CHAN SSID HOSTNAME MACID MODE; do
  printf "<wifi>\n"
  printf "\t<signal>$SIG</signal>\n"
  printf "\t<channel>$CHAN</channel>\n"
  printf "\t<ssid>$SSID</ssid>\n"
  printf "\t<host>$HOSTNAME</host>\n"
  printf "\t<macId>$MACID</macId>\n"
  printf "\t<mode>$MODE</mode>\n"
  printf "\t<reportBy>$(getNodeId)</reportBy>\n"
  printf "\t<lastUpdate>$(getTimeStamp)</lastUpdate>\n"
  printf "</wifi>\n\n"
done </tmp/vdnScan
rm /tmp/vdnScan
}


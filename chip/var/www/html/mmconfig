#!/bin/bash 

<<Interface_Modes

 Interface: wlan1 = AP for all modes.

 Parameters: type, Callsign, NodeId, AdminPassword, NodeCH, Eth0Mode, RouterName, WifiSSID, WifiPassword, Eth0Use, apSSID, apPASS, apCH, nodeSSID

Interface_Modes

#---[ FUNCTIONS ]---------------------------------------------------------------------

createAP()
{
# Create access point configuration file
echo "#If you want dnsmasq to listen for DHCP and DNS requests only on" > /etc/dnsmasq.d/access_point.conf
echo "#specified interfaces (and the loopback) give the name of the" >> /etc/dnsmasq.d/access_point.conf
echo "#interface (eg eth0) here." >> /etc/dnsmasq.d/access_point.conf
echo "#Repeat the line for more than one interface." >> /etc/dnsmasq.d/access_point.conf
echo "interface=wlan1" >> /etc/dnsmasq.d/access_point.conf
echo "#Or you can specify which interface not to listen on" >> /etc/dnsmasq.d/access_point.conf
echo "except-interface=eth0 " >> /etc/dnsmasq.d/access_point.conf
echo "" >> /etc/dnsmasq.d/access_point.conf
echo "#Uncomment this to enable the integrated DHCP server, you need" >> /etc/dnsmasq.d/access_point.conf
echo "#to supply the range of addresses available for lease and optionally" >> /etc/dnsmasq.d/access_point.conf
echo "#a lease time. If you have more than one network, you will need to" >> /etc/dnsmasq.d/access_point.conf
echo "#repeat this for each network on which you want to supply DHCP" >> /etc/dnsmasq.d/access_point.conf
echo "#service." >> /etc/dnsmasq.d/access_point.conf
echo "dhcp-range=172.20.0.100,172.20.0.250,1h " >> /etc/dnsmasq.d/access_point.conf

# Configure the WiFi access point on wlan1
echo "interface=wlan1" > /etc/hostapd.conf
echo "driver=nl80211" >> /etc/hostapd.conf
echo "ssid=$apSSID" >> /etc/hostapd.conf
echo "channel=$apCH" >> /etc/hostapd.conf
echo "auth_algs=3" >> /etc/hostapd.conf
echo "max_num_sta=10" >> /etc/hostapd.conf
echo "wpa=2" >> /etc/hostapd.conf
echo "wpa_passphrase=$apPASS" >> /etc/hostapd.conf
echo "wpa_pairwise=TKIP CCMP" >> /etc/hostapd.conf
echo "rsn_pairwise=CCMP" >> /etc/hostapd.conf
echo "ctrl_interface=/var/run/hostapd" >> /etc/hostapd.conf

# Restart Services
[ -f "/var/run/hostapd/wlan1" ] && rm -r "/var/run/hostapd/wlan1"
sudo /usr/sbin/update-rc.d hostapd disable
sudo /bin/systemctl daemon-reload
sudo /bin/systemctl enable hostapd-systemd
sudo /bin/systemctl restart hostapd-systemd

# Create script for handling service spin up
echo "#!/bin/bash" > /usr/sbin/vdn-router
echo "" >> /usr/sbin/vdn-router
echo "# Make sure interface is up" >> /usr/sbin/vdn-router
echo "ifdown wlan1" >> /usr/sbin/vdn-router
echo "ifup wlan1" >> /usr/sbin/vdn-router
echo "" >> /usr/sbin/vdn-router
echo "# Enable DNS forwarding" >> /usr/sbin/vdn-router
echo "#sysctl -w net.ipv4.ip_forward=1" >> /usr/sbin/vdn-router
echo "" >> /usr/sbin/vdn-router
echo "# Enable NAT" >> /usr/sbin/vdn-router
echo "#iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE" >> /usr/sbin/vdn-router
echo "" >> /usr/sbin/vdn-router
echo "# Start the Access Point" >> /usr/sbin/vdn-router
echo "/usr/sbin/hostapd /etc/hostapd.conf" >> /usr/sbin/vdn-router

# Make the spin up script executable
chmod +x /usr/sbin/vdn-router

# Configure it to create AP on boot.
echo "[Unit]" > /lib/systemd/system/hostapd-systemd.service
echo "Description=hostapd service" >> /lib/systemd/system/hostapd-systemd.service
echo "Wants=network-manager.service" >> /lib/systemd/system/hostapd-systemd.service
echo "After=network-manager.service" >> /lib/systemd/system/hostapd-systemd.service
echo "Wants=module-init-tools.service" >> /lib/systemd/system/hostapd-systemd.service
echo "After=module-init-tools.service" >> /lib/systemd/system/hostapd-systemd.service
echo "ConditionPathExists=/etc/hostapd.conf" >> /lib/systemd/system/hostapd-systemd.service
echo "" >> /lib/systemd/system/hostapd-systemd.service
echo "[Service]" >> /lib/systemd/system/hostapd-systemd.service
echo "ExecStart=/usr/sbin/vdn-router" >> /lib/systemd/system/hostapd-systemd.service
echo "" >> /lib/systemd/system/hostapd-systemd.service
echo "[Install]" >> /lib/systemd/system/hostapd-systemd.service
echo "WantedBy=multi-user.target" >> /lib/systemd/system/hostapd-systemd.service

# Disable the existing systemV script for booting hostapd:
update-rc.d hostapd disable

# Restart Services
[ -f "/var/run/hostapd/wlan1" ] && rm -r "/var/run/hostapd/wlan1"
/usr/sbin/update-rc.d hostapd disable
/bin/systemctl daemon-reload
/bin/systemctl enable hostapd-systemd
/bin/systemctl restart hostapd-systemd

# Setup the systemd service
systemctl daemon-reload
systemctl enable hostapd-systemd

# Start AP:
systemctl start hostapd-systemd

}

connectWifi()
{
# Connect to Wifi
sudo nmcli dev disconnect wlan1 2>&1
sudo nmcli device wifi connect $wifiSSID password $wifiPASS ifname wlan0 2>&1
}


createADHOC()
{
sudo chmod 777 /usr/sbin/olsrd-adhoc-setup
sudo echo "#!/bin/sh" > /usr/sbin/olsrd-adhoc-setup
sudo echo "# Auto created by Valley Digital Network Installer." >> /usr/sbin/olsrd-adhoc-setup
sudo echo "sudo /sbin/iwconfig wlan1 mode ad-hoc channel $nodeCH essid $nodeSSID" >> /usr/sbin/olsrd-adhoc-setup
sudo echo "sudo sleep 1" >> /usr/sbin/olsrd-adhoc-setup
sudo echo "sudo /sbin/ifconfig wlan1 up" >> /usr/sbin/olsrd-adhoc-setup
sudo chmod 755 /usr/sbin/olsrd-adhoc-setup

# Lets Calculate the IP Address via Mac Address
echo -ne "Setting up IP address: "
MACID=`sudo ifconfig | grep wlan1 | sed 's|.*HWaddr ||'`
MAC4=`echo $MACID | cut -d : -f 4`
MAC5=`echo $MACID | cut -d : -f 5`
MAC6=`echo $MACID | cut -d : -f 6`
ip2=`printf %d 0x$MAC4`
ip3=`printf %d 0x$MAC5`
ip4=`printf %d 0x$MAC6`
net=10
nodeIP=$net.$ip2.$ip3.$ip4
echo -e $nodeIP"\n"

# add to /etc/network/interfaces
sudo echo >> /etc/network/interfaces
sudo echo "auto wlan1 " >> /etc/network/interfaces
sudo echo "iface wlan1 inet static " >> /etc/network/interfaces
sudo echo -e "\taddress $nodeIP" >> /etc/network/interfaces
sudo echo -e "\tnetmask 255.0.0.0 " >> /etc/network/interfaces
sudo echo -e "\twireless-channel $nodeCH " >> /etc/network/interfaces
sudo echo -e "\twireless-essid $nodeSSID" >> /etc/network/interfaces
sudo echo -e "\twireless-mode ad-hoc " >> /etc/network/interfaces
}

createDNS()
{
echo "#If you want dnsmasq to listen for DHCP and DNS requests only on" > /etc/dnsmasq.d/access_point.conf
echo "#specified interfaces (and the loopback) give the name of the" >> /etc/dnsmasq.d/access_point.conf
echo "#interface (eg eth0) here." >> /etc/dnsmasq.d/access_point.conf
echo "#Repeat the line for more than one interface." >> /etc/dnsmasq.d/access_point.conf
echo "interface=wlan1" >> /etc/dnsmasq.d/access_point.conf
echo "#Or you can specify which interface not to listen on" >> /etc/dnsmasq.d/access_point.conf
echo "except-interface=eth0 " >> /etc/dnsmasq.d/access_point.conf
echo "" >> /etc/dnsmasq.d/access_point.conf
echo "#Uncomment this to enable the integrated DHCP server, you need" >> /etc/dnsmasq.d/access_point.conf
echo "#to supply the range of addresses available for lease and optionally" >> /etc/dnsmasq.d/access_point.conf
echo "#a lease time. If you have more than one network, you will need to" >> /etc/dnsmasq.d/access_point.conf
echo "#repeat this for each network on which you want to supply DHCP" >> /etc/dnsmasq.d/access_point.conf
echo "#service." >> /etc/dnsmasq.d/access_point.conf
echo "dhcp-range=172.20.0.100,172.20.0.250,1h " >> /etc/dnsmasq.d/access_point.conf
}

createOLSR()
{
# Create the OLSRD Config File
sudo cp /etc/olsrd/olsrd.conf.vdn /etc/olsrd/olsrd.conf
sudo sed -i.bak "s/.*MainIp.*/MainIp $nodeIP/" /etc/olsrd/olsrd.conf
sudo sed -i.bak "s/.*Interface.*/Interface \"wlan1\"/" /etc/olsrd/olsrd.conf
sudo sed -i.bak "s/.*PlParam \"name\".*/    PlParam \"name\" \"$nodeID\"/" /etc/olsrd/olsrd.conf

# edit OLSRD boot options
sudo sed -i.bak "s/.*#START_OLSRD=.*/START_OLSRD=\"YES\"/" /etc/default/olsrd
sudo sed -i.bak "s/.*#SETUP_ADHOC=.*/SETUP_ADHOC=\"YES\"/" /etc/default/olsrd
sudo sed -i.bak "s/.*MESH_IF=.*/MESH_IF=wlan1/" /etc/default/olsrd
sudo sed -i.bak "s/.*channel=.*/channel=$nodeCH/" /etc/default/olsrd
sudo sed -i.bak "s/.*ssid=.*/ssid=$nodeSSID/" /etc/default/olsrd
sudo sed -i.bak "s/.*bssid=.*/#bssid=/" /etc/default/olsrd

sudo /usr/sbin/olsrd-adhoc-setup
sudo ifconfig wlan1 inet $nodeIP broadcast $net.255.255.255
}

enableNAT()
{
# Download the kernel mods for enabling NAT
cd /lib/modules/4.4.13-ntc-mlc/kernel/net/ipv4/netfilter
cp /tmp/vdn/ipt_MASQUERADE.ko .
cp /tmp/vdn/nf_nat_masquerade_ipv4.ko .
depmod
}


#---[ MAIN ]----------------------------------------------------------------------------------

clear
#if [[ $# -eq 0 ]]; then checkInterfaces; fi

request=$1

if [[ $request == "check" ]]; then 
   if [[ $2 == "installed" ]]; then [ -e "/var/www/html/.installed" ] && echo "TRUE" || echo "FALSE"; fi
   if [[ $2 == "ethernet" ]]; then [ -d "/sys/class/net/eth0" ] && echo "TRUE" || echo "FALSE"; fi
fi

# Get all Parameter Values
  callsign=$2
  nodeID=$3
  adminPASS=$4
  nodeCH=$5
  nodeEthMode=$6
  shift; shift; shift; shift; shift; shift;
  routerName=$1
  wifiSSID=$2
  wifiPASS=$3
  routeEthMode=$4
  apSSID=$5
  apPASS=$6
  apCH=$7
  nodeSSID=$8

# Router Mode
if [[ $request == "microrouter" ]]; then  
  
  echo "Router [$routerName]"
  echo "Wifi [$wifiSSID]"
  echo "WifiPassword [$wifiPASS]"
  echo "Eth Mode [$routeEthMode]"
  echo "AP [$apSSID]"
  echo "AP-Pass [$apPASS]"
  echo "AP-CH [$apCH]"
  echo

if [[ $routeEthMode == "WAN" ]]; then 
  echo "SETUP IP Forwarding for ETH0"
fi

  enableNAT
  createAP
  connectWifi

fi

# Mesh Mode
if [[ $request == "micromesh" ]]; then 

  echo "Callsign [$callsign]"
  echo "NodeID [$nodeID]"
  echo "Admin Password [$adminPASS]"
  echo "Node Channel [$nodeCH]"
  echo "Node Ethernet Mode [$nodeEthMode]"
  echo "Node SSID [$nodeSSID]"
  echo
  echo "Router [$routerName]"
  echo "Wifi [$wifiSSID]"
  echo "WifiPassword [$wifiPASS]"
  echo "Eth Mode [$routeEthMode]"
  echo "AP [$apSSID]"
  echo "AP-Pass [$apPASS]"
  echo "AP-CH [$apCH]"
  echo

  createADHOC
  createOLSR

fi

# Set host file and hostname
###  wlanIP=`ifconfig wlan1 | grep "inet addr" | cut -d ':' -f 2 | cut -d ' ' -f 1`
#  echo -e "127.0.0.1\tlocalhost" > /etc/hosts
#  echo -e "$nodeIP\t$nodeID" >> /etc/hosts
#  echo "::1       localhost ip6-localhost ip6-loopback" >> /etc/hosts
#  echo "ff02::1   ip6-allnodes" >> /etc/hosts
#  echo "ff02::2   ip6-allrouters" >> /etc/hosts
#  echo $nodeID > /etc/hostname

  sudo chgrp -R www-data /etc/olsrd/olsrd.conf
  sudo chmod g+w -R /etc/olsrd/olsrd.conf

# Update resolv.conf file.
if [ -L /etc/resolv.conf ]; then
    rm -f /etc/resolv.conf
    touch /etc/resolv.conf
fi
  sudo bash -c "echo 'nameserver 8.8.8.8' > /etc/resolv.conf"

# start OLSRD
sudo olsrd -f /etc/olsrd/olsrd.conf

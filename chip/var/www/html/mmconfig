#!/bin/bash

<<Interface_Modes

 Interface: wlan1 = AP for all modes.

 Parameters: type, Callsign, NodeId, AdminPassword, NodeCH, Eth0Mode, RouterName, WifiSSID, WifiPassword, Eth0Use, apSSID, apPASS, apCH, nodeSSID

Interface_Modes

#---[ GLOBAL VARIABLES ]--------------------------------------------------------------

defaultWLAN=wlan1
defaultLAN=eth0

#---[ FUNCTIONS ]---------------------------------------------------------------------

createADHOC() {
    defaultWLAN=$1
    nodeCH=$2
    nodeSSID=$3
    nodeIP=$4
    iwconfig $defaultWLAN mode ad-hoc
    iwconfig $defaultWLAN channel $nodeCH
    iwconfig $defaultWLAN essid $nodeSSID
    iwconfig $defaultWLAN key off
    ifconfig $defaultWLAN up
    echo "" > /etc/network/interfaces
    echo "# Created by VDN Scripts... Do not edit directly, changes will be lost !" >> /etc/network/interfaces
    echo -e "\nauto lo" >> /etc/network/interfaces
    echo -e "iface lo inet loopback\n" >> /etc/network/interfaces
    echo -e "\nauto $defaultWLAN" >> /etc/network/interfaces
    echo -e "iface $defaultWLAN inet static " >> /etc/network/interfaces
    echo -e "\taddress $nodeIP" >> /etc/network/interfaces
    echo -e "\tnetmask 255.0.0.0 " >> /etc/network/interfaces
    echo -e "\twireless-channel $nodeCH " >> /etc/network/interfaces
    echo -e "\twireless-essid $nodeSSID" >> /etc/network/interfaces
    echo -e "\twireless-mode ad-hoc\n" >> /etc/network/interfaces
}

createAP() {
    # Disconnect from Wifi
    echo "disconnecting any existing connections on $defaultWLAN"
    nmcli dev disconnect $defaultWLAN 2>&1
    
    # Configure the WiFi access point on wlan1
    echo "interface=$defaultWLAN" > /etc/hostapd.conf
    echo "driver=nl80211" >> /etc/hostapd.conf
    echo "ssid=$apSSID" >> /etc/hostapd.conf
    echo "channel=$apCH" >> /etc/hostapd.conf
    echo "auth_algs=3" >> /etc/hostapd.conf
    echo "max_num_sta=10" >> /etc/hostapd.conf
    echo "wpa=2" >> /etc/hostapd.conf
    echo "wpa_passphrase=$apPASS" >> /etc/hostapd.conf
    echo "wpa_pairwise=TKIP CCMP" >> /etc/hostapd.conf
    echo "rsn_pairwise=CCMP" >> /etc/hostapd.conf
    echo "ctrl_interface=/var/run/hostapd" >> /etc/hostapd.conf
    echo -e "$apSSID" > /var/www/flags/.apSSID
    echo -e "$apPASS" > /var/www/flags/.apPASS
    echo -e "$apCH" > /var/www/flags/.apChannel
    echo "" >> /usr/sbin/vdn-router
    echo "# Start the Access Point" >> /usr/sbin/vdn-router
    echo "/usr/sbin/hostapd /etc/hostapd.conf" >> /usr/sbin/vdn-router
    
    # Remove Mesh-Node config files.
    sudo rm /etc/dnsmasq.d/mesh-node.conf
    
    # Restart Services
    sudo /bin/systemctl stop router-systemd
    sudo /bin/systemctl stop hostapd-systemd
    sudo /usr/sbin/update-rc.d hostapd disable
    
    sudo /bin/systemctl daemon-reload
    sudo /bin/systemctl enable hostapd-systemd
    sudo /bin/systemctl start hostapd-systemd
    sudo /bin/systemctl status hostapd-systemd
}


createDHCP() {
    
    interfaceDHCP=$1        # Interface serving the DHCP
    interfaceGateway=$2     # Interface providing IP and DNS Forwarding
    nodeIP="172.20.0.1"
    # Set up a static IP for the AP(accesspoint)
    echo "adding $interfaceDHCP to /etc/network/interfaces"
    
    ifconfig $interfaceDHCP $nodeIP
    sudo echo "" > /etc/network/interfaces
    sudo echo "# Created by VDN Scripts... Do not edit directly, changes will be lost !" >> /etc/network/interfaces
    sudo echo "# automatically re-created during install & updates" >> /etc/network/interfaces
    sudo echo "auto lo" >> /etc/network/interfaces
    sudo echo -e "iface lo inet loopback\n" >> /etc/network/interfaces
    sudo echo -e "" >> /etc/network/interfaces
    sudo echo "auto $interfaceGateway" >> /etc/network/interfaces
    sudo echo "iface $interfaceGateway inet dhcp" >> /etc/network/interfaces
    sudo echo -e "" >> /etc/network/interfaces
    sudo echo "auto $interfaceDHCP" >> /etc/network/interfaces
    sudo echo "iface $interfaceDHCP inet static" >> /etc/network/interfaces
    sudo echo "    address $nodeIP" >> /etc/network/interfaces
    sudo echo "    netmask 255.255.255.0" >> /etc/network/interfaces
    
    # Restart the hosting interface:
    echo "spinning down $interfaceDHCP"
    sudo ifdown $interfaceDHCP
    echo "spinning up $interfaceDHCP"
    sudo ifup $interfaceDHCP
    
    echo "spinning down $interfaceGateway"
    sudo ifdown $interfaceGateway
    echo "spinning up $interfaceGateway"
    sudo ifup $interfaceGateway
    
    
    # Create Dnsmasq & Restart the DHCP server
    echo "Writing to /etc/dnsmasq.d/access-point.conf"
    sudo rm -r /etc/dnsmasq.d/*.conf
    sudo echo "" > /etc/dnsmasq.d/access-point.conf
    sudo echo "# Created by VDN Scripts... Do not edit directly, changes will be lost !" >> /etc/dnsmasq.d/access-point.conf
    sudo echo -e "\ninterface=$interfaceDHCP" >> /etc/dnsmasq.d/access-point.conf
    sudo echo -e "\nexcept-interface=$interfaceGateway" >> /etc/dnsmasq.d/access-point.conf
    sudo echo -e "\ndhcp-range=172.20.0.100,172.20.0.250,1h" >> /etc/dnsmasq.d/access-point.conf
    
    echo "restarting dnsmasq"
    sudo /etc/init.d/dnsmasq restart
}


createHosts() {
    newHostName=$1
    nodeIP=$2
    # Update host file and hostname
    echo "Updating hosts file with hostname:$newHostName"
    echo "#Created by VDN Scripts. Do not edit !!!" > /etc/hosts
    echo "127.0.0.1 localhost" >> /etc/hosts
    echo "$nodeIP $newHostName" >> /etc/hosts
    echo "::1 localhost ip6-localhost ip6-loopback" >> /etc/hosts
    echo "ff02::1 ip6-allnodes" >> /etc/hosts
    echo "ff02::2 ip6-allrouters" >> /etc/hosts
}


getIP() {
    interface=$1
    defaultWLAN=wlan1
    MACID=`cat /sys/class/net/$interface/address`
    MAC4=`echo $MACID | cut -d : -f 4 `
    MAC5=`echo $MACID | cut -d : -f 5 `
    MAC6=`echo $MACID | cut -d : -f 6 `
    
    ip1=10
    ip2=`printf %d 0x$MAC4 `
    ip3=`printf %d 0x$MAC5 `
    ip4=`printf %d 0x$MAC6 `
    
    lanIP=$ip1.$ip3.$ip4."1"
    nodeIP=$ip1.$ip2.$ip3.$ip4
    dhcpStart=$ip1.$ip3.$ip4
    
    if [[ $interface == "eth0" ]]; then
        echo $lanIP
        ifconfig $interface $lanIP
        sed -i  "s/.*#interface=$defaultLAN.*/interface=$defaultLAN/" /etc/dnsmasq.d/mesh-node.conf
        sed -i  "s/.*dhcp-range=.*/dhcp-range=$dhcpStart.100,$dhcpStart.105,255.255.255.0,1H/" /etc/dnsmasq.d/mesh-node.conf
        sed -i  "s|#address=/localnode.*|address=/localnode/$nodeIP|" /etc/dnsmasq.d/mesh-node.conf
        sed -i  "s|.*address=/node-id.*|address=/$nodeID/$nodeIP|" /etc/dnsmasq.d/mesh-node.conf
    fi
    
    if [[ $interface == $defaultWLAN ]]; then
        echo $nodeIP
        ifconfig $interface $nodeIP
    fi
    
    printf "*********** DHCP Start = $dhcpStart *************\n"
}

createOLSR() {
    defaultWLAN=$1
    nodeID=$2
    nodeIP=$3
    cp /etc/default/olsrd.conf.vdn /etc/olsrd/olsrd.conf
    sed -i  "s/.*MainIp.*/MainIp $nodeIP/" /etc/olsrd/olsrd.conf
    sed -i  "s/.*Interface.*/Interface \"$defaultWLAN\"/" /etc/olsrd/olsrd.conf
    sed -i  "s/.*PlParam \"name\".*/    PlParam \"name\" \"$nodeID\"/" /etc/olsrd/olsrd.conf
    sed -i  "s/.*to-source.*/iptables -t nat -A POSTROUTING -o $defaultWLAN -j SNAT --to-source $nodeIP/" /etc/rc.local
    sed -i  "s/wlan./$defaultWLAN/g" /etc/rc.local
    echo "# Generated by VDN Scripts" > /etc/resolv.conf
    echo "127.0.0.1" >> /etc/resolv.conf
    echo "8.8.8.8" >> /etc/resolv.conf
}

createRouter() {
    routerSource=$1
    routerDestination=$2
    sudo echo "#!/bin/bash" > /usr/sbin/vdn-router
    sudo echo "" >> /usr/sbin/vdn-router
    sudo echo "# Make sure interface $routerSource is up" >> /usr/sbin/vdn-router
    sudo echo "ifdown $routerSource" >> /usr/sbin/vdn-router
    sudo echo "ifup $routerSource" >> /usr/sbin/vdn-router
    sudo echo "" >> /usr/sbin/vdn-router
    sudo echo "# Enable DNS forwarding" >> /usr/sbin/vdn-router
    sudo echo "sysctl -w net.ipv4.ip_forward=1" >> /usr/sbin/vdn-router
    sudo echo "" >> /usr/sbin/vdn-router
    sudo echo "# Enable NAT" >> /usr/sbin/vdn-router
    sudo echo "iptables -t nat -A POSTROUTING -o $routerDestination -j MASQUERADE" >> /usr/sbin/vdn-router
}

connectWifi() {
    # Connect to Wifi
    echo "disconnecting any existing connections on $defaultWLAN"
    sudo nmcli dev disconnect $defaultWLAN 2>&1
    echo "connecting to WiFi ($wifiSSID) on $defaultWLAN"
    sudo nmcli device wifi connect $wifiSSID password $wifiPASS ifname $defaultWLAN 2>&1
    echo -e "$wifiSSID" > /var/www/flags/.wifiSSID
    echo -e "$wifiPASS" > /var/www/flags/.wifiPASS
    
    # Start Service
    sudo /bin/systemctl stop hostapd-systemd
    sudo /bin/systemctl stop router-systemd
    sudo /usr/sbin/update-rc.d hostapd disable
    
    sudo /bin/systemctl daemon-reload
    sudo /bin/systemctl enable router-systemd
    sudo /bin/systemctl start router-systemd
    sudo /bin/systemctl status router-systemd
    sudo /etc/init.d/networking restart
    
}

setupMeshEthernet() {
    
    cp /etc/default/dnsmasq.vdn /etc/default/dnsmasq
    cp /etc/default/mesh-node.vdn /etc/dnsmasq.d/mesh-node.conf
    
    meshEthernetMode=$1
    callsign=$2
    nodeID=$3
    adminPASS=$4
    nodeCH=$5
    nodeSSID=$6
    defaultWLAN=wlan1
    defaultLAN=eth0
    nodeIP=$(getIP $defaultWLAN)
    lanIP=$(getIP $defaultLAN)
    createADHOC $defaultWLAN $nodeCH $nodeSSID $nodeIP
    createOLSR $defaultWLAN $nodeID $nodeIP
    createHosts $nodeID $nodeIP
    echo $nodeID > /etc/hostname
    hostname $nodeID
    echo -e $callsign > /var/www/flags/.callsign
    echo -e "Callsign [$callsign]"
    echo -e "NodeID [$nodeID]"
    echo -e "Admin Password [$adminPASS]"
    echo -e "Node Channel [$nodeCH]"
    echo -e "Node Ethernet Mode [$meshEthMode]"
    echo -e "Node SSID [$nodeSSID]"
    echo -e "Node IP [$nodeIP]"
    echo -e "LAN IP [$lanIP]"
    echo -e "DHCP Start [$dhcpStart]\n"
    
    case $meshEthernetMode in
        
        LAN )
            echo -e "\nauto $defaultLAN" >> /etc/network/interfaces
            echo -e "iface $defaultLAN inet static" >> /etc/network/interfaces
            echo -e "\taddress $lanIP" >> /etc/network/interfaces
            echo -e "\tnetmask 255.255.255.0\n" >> /etc/network/interfaces
            /etc/init.d/networking restart
            touch /var/www/flags/.lan
        ;;
        
        WAN )
            echo -e "\nauto $defaultLAN" >> /etc/network/interfaces
            echo -e "iface $defaultLAN inet dhcp" >> /etc/network/interfaces
            /etc/init.d/networking restart
            touch /var/www/flags/.wan
        ;;
    esac
    
    systemctl daemon-reload
    /etc/init.d/dnsmasq restart
    /etc/rc.local
    touch /var/www/flags/.micromesh
}

setupRouterEthernet() {
    if [[ $# -lt 1 ]]; then
        echo "mmconfig::setupRouterEthernet() No arguments provided"
        exit 1
    fi
    
    defaultWLAN=wlan0
    
    # --- Setting variables from function call ---
    routerEthMode=$1    # Ethernet Mode (ETH, WLAN)
    case $routerEthMode in
        
        ETH )
            # Setup eth connection as the gateway
            shift;
            if [[ $# -lt 4 ]]; then
                echo "mmconfig::setupRouterEthernet() ETH mode requires more arguments"
                exit 1
            fi
            routerName=$1
            apSSID=$2
            apPASS=$3
            apCH=$4
            
            #sanitize
            
            createHosts $routerName "172.20.0.1"
            sudo echo $routerName > /etc/hostname
            sudo hostname $routerName
            #/etc/rc.local
            sudo /etc/init.d/avahi-daemon restart
            echo -e " [updated node name to $routerName] "
            
            echo "Router [$routerName]"
            echo "Eth Mode [$routerEthMode]"
            echo "AP [$apSSID]"
            echo "AP-Pass [$apPASS]"
            echo "AP-CH [$apCH]"
            echo ""
            
            # Remove existing Flags
            [ -f "/var/www/flags/.wlan" ] && rm /var/www/flags/.wlan
            [ -f "/var/www/flags/.wifiSSID" ] && rm /var/www/flags/.wifiSSID
            [ -f "/var/www/flags/.wifiPASS" ] && rm /var/www/flags/.wifiPASS
            
            sudo touch /var/www/flags/.eth
            echo "SETUP AccessPoint on $defaultWLAN with IP Forwarding to $defaultLAN"
            createDHCP $defaultWLAN $defaultLAN
            createRouter $defaultWLAN $defaultLAN
            createAP
        ;;
        
        WLAN )
            # Setup wlan connection as the gateway
            shift;
            if [[ $# -lt 3 ]]; then
                echo "mmconfig::setupRouterEthernet() WLAN mode requires more arguments"
                exit 1
            fi
            routerName=$1
            wifiSSID=$2
            wifiPASS=$3
            
            #sanitize
            
            createHosts $routerName "172.20.0.1"
            sudo echo $routerName > /etc/hostname
            sudo hostname $routerName
            #/etc/rc.local
            sudo /etc/init.d/avahi-daemon restart
            echo -e " [updated node name to $routerName] "
            
            echo "Router [$routerName]"
            echo "Wifi [$wifiSSID]"
            echo "WifiPassword [$wifiPASS]"
            echo "Eth Mode [$routerEthMode]"
            echo ""
            
            # Remove existing Flags
            [ -f "/var/www/flags/.eth" ] && rm /var/www/flags/.eth
            [ -f "/var/www/flags/.apPASS" ] && rm /var/www/flags/.apPASS
            [ -f "/var/www/flags/.apSSID" ] && rm /var/www/flags/.apSSID
            [ -f "/var/www/flags/.apChannel" ] && rm /var/www/flags/.apChannel
            
            sudo touch /var/www/flags/.wlan
            defaultWLAN=wlan0
            echo "Setting up DHCP and IP Forwarding to $defaultLAN"
            createDHCP $defaultLAN $defaultWLAN
            createRouter $defaultLAN $defaultWLAN
            echo "CONNECT to WiFi Hotspot using $defaultWLAN"
            connectWifi
            
        ;;
        
        * )
            echo "mmconfig::setupRouterEthernet() Supported modes are ETH or WLAN"
            exit 1
        ;;
        
    esac
    
    # Set installation type flag for status page.
    sudo touch /var/www/flags/.microrouter
    
}



sanitize() {
    
    # Remove existing Flags
    [ -f "/var/www/flags/.installed" ] && rm /var/www/flags/.installed
    [ -f "/var/www/flags/.micromesh" ] && rm /var/www/flags/.micromesh
    [ -f "/var/www/flags/.microrouter" ] && rm /var/www/flags/.microrouter
    [ -f "/var/www/flags/.admin" ] && rm /var/www/flags/.admin
    [ -f "/var/www/flags/.lan" ] && rm /var/www/flags/.lan
    [ -f "/var/www/flags/.wan" ] && rm /var/www/flags/.wan
    [ -f "/var/www/flags/.eth" ] && rm /var/www/flags/.eth
    [ -f "/var/www/flags/.wlan" ] && rm /var/www/flags/.wlan
    [ -f "/var/www/flags/.apPASS" ] && rm /var/www/flags/.apPASS
    [ -f "/var/www/flags/.apSSID" ] && rm /var/www/flags/.apSSID
    [ -f "/var/www/flags/.apChannel" ] && rm /var/www/flags/.apChannel
    [ -f "/var/www/flags/.wifiSSID" ] && rm /var/www/flags/.wifiSSID
    [ -f "/var/www/flags/.wifiPASS" ] && rm /var/www/flags/.wifiPASS
    
    createHosts "chip" "172.20.0.1"
    
    sudo echo chip > /etc/hostname
    sudo hostname chip
    #/etc/rc.local
    sudo /etc/init.d/avahi-daemon restart
    
    rm /etc/network/interfaces
    sudo /etc/init.d/networking restart
    
    [ -f "/etc/dnsmasq.d/access-point.conf" ] && rm /etc/dnsmasq.d/access-point.conf
    [ -f "/etc/dnsmasq.d/mesh-node.conf" ] && rm /etc/dnsmasq.d/mesh-node.conf
    
    sudo /bin/systemctl stop router-systemd
    sudo /bin/systemctl disable router-systemd
    sudo /bin/systemctl stop hostapd-systemd
    sudo /bin/systemctl disable hostapd-systemd
    sudo /usr/sbin/update-rc.d hostapd disable
    
    sudo /bin/systemctl daemon-reload
    
    
    sudo /etc/init.d/dnsmasq restart
    
    
}




#---[ MAIN ]----------------------------------------------------------------------------------

clear

if [[ $# -lt 1 ]]; then echo "invalid or no parameters used !"; exit 1; fi

[ ! -d "/var/www/flags" ] && mkdir /var/www/flags

request=$1

if [[ $request == "check" ]]; then
    if [[ $2 == "installed" ]]; then [ -e "/var/www/html/.installed" ] && echo "TRUE" || echo "FALSE"; fi
    if [[ $2 == "ethernet" ]]; then [ -d "/sys/class/net/eth0" ] && echo "TRUE" || echo "FALSE"; fi
    exit 0
fi

if [[ $request == "update" ]]; then
    shift
    while [ $# -gt 0 ]
    do
        [ -f /var/www/flags/.microrouter ] && defaultWLAN=wlan0
        [ -f /var/www/flags/.micromesh ] && defaultWLAN=wlan1
        
        case "$1" in
            
            adminPASS )
                #Change admin password
                echo $2 > /var/www/flags/.admin
                echo -e " [updated admin password] "
                shift; shift;
            ;;
            
            apChannel )
                #update channel
                sudo sed -i  "s/.*channel=.*/channel=$2/" /etc/hostapd.conf
                shift; shift;
                # Update any required services.
                sudo systemctl restart hostapd-systemd
            ;;
            
            apName )
                #Change Router Name
                echo $2 > /etc/hostname
                sudo sed -i  "s/.*127.0.0.1 localhost.*/127.0.0.1 localhost $2/" /etc/hosts
                shift; shift;
                # Update any required services.
                systemctl restart hostapd-systemd
            ;;
            
            apPASS )
                #Change access point password
                sudo sed -i  "s/.*wpa_passphrase=.*/wpa_passphrase=$2/" /etc/hostapd.conf
                shift; shift;
                # Update any required services.
                sudo systemctl restart hostapd-systemd
                
            ;;
            
            apSSID )
                #update ssid
                sudo sed -i  "s/.*ssid=.*/ssid=$2/" /etc/hostapd.conf
                shift; shift;
                # Update any required services.
                sudo systemctl restart hostapd-systemd
            ;;
            
            callsign )
                echo -e $2 > /var/www/flags/.callsign
                echo -e " [updated callsign to $2] "
                shift; shift;
            ;;
            
            meshSSID )
                #update ssid
                sudo sed -i  "s/.*wireless-essid.*/\twireless-essid $2/" /etc/network/interfaces
                sudo ifconfig $defaultWLAN down
                sudo ifconfig $defaultWLAN up
                echo -e " [updated node to SSID $2] "
                shift; shift;
                sudo /etc/init.d/networking restart
            ;;
            
            meshChannel )
                #update channel
                sudo sed -i  "s/.*wireless-channel.*/\twireless-channel $2/" /etc/network/interfaces
                sudo ifconfig $defaultWLAN down
                sudo ifconfig $defaultWLAN up
                echo -e " [updated node to channel $2] "
                shift; shift;
                sudo /etc/init.d/networking restart
            ;;
            
            meshName )
                #Change mesh node Name
                newHostName=$2
                nodeIP=$(getIP $defaultWLAN)
                createHosts $newHostName $nodeIP
                sudo echo $2 > /etc/hostname
                sudo hostname $2
                sudo sed -i  "s/.*PlParam \"name\".*/    PlParam \"name\" \"$2\"/" /etc/olsrd/olsrd.conf
                /etc/rc.local
                echo -e " [updated node name to $2] "
                shift; shift;
            ;;
            
            meshEthernetType )
                setupMeshEthernet $2
                echo -e " [updated node to use ethernet as $2] "
                shift; shift;
            ;;
            
            routerEthernetType )
                setupRouterEthernet $2 $3 $4 $5 $6
                echo -e " [updated node to use $2 as the gateway interface] "
                exit 0
            ;;
        esac
    done
    
    exit 0
fi

# Remove existing Flags
[ -f "/var/www/flags/.installed" ] && rm /var/www/flags/.installed
[ -f "/var/www/flags/.micromesh" ] && rm /var/www/flags/.micromesh
[ -f "/var/www/flags/.microrouter" ] && rm /var/www/flags/.microrouter
[ -f "/var/www/flags/.admin" ] && rm /var/www/flags/.admin
[ -f "/var/www/flags/.lan" ] && rm /var/www/flags/.lan
[ -f "/var/www/flags/.wan" ] && rm /var/www/flags/.wan
[ -f "/var/www/flags/.eth" ] && rm /var/www/flags/.eth
[ -f "/var/www/flags/.wlan" ] && rm /var/www/flags/.wlan

# Get all Parameter Values
callsign=$2
nodeID=$3
adminPASS=$4
nodeCH=$5
meshEthMode=$6
shift; shift; shift; shift; shift; shift;
routerName=$1
wifiSSID=$2
wifiPASS=$3
routerEthMode=$4
apSSID=$5
apPASS=$6
apCH=$7
nodeSSID=$8

# Record password...
echo -e $adminPASS > /var/www/flags/.admin

# Router Mode
if [[ $request == "microrouter" ]]; then
    #  [[ $routerEthMode == "ETH" ]] && setupRouterEthernet $routerEthMode $routerName $apSSID $apPASS $apCH
    #  [[ $routerEthMode == "WLAN" ]] && setupRouterEthernet $routerEthMode $routerName $wifiSSID $wifiPASS
    
    if [[ $routerEthMode == "ETH" ]]; then
        setupRouterEthernet $routerEthMode $routerName $apSSID $apPASS $apCH
    fi
    
    if [[ $routerEthMode == "WLAN" ]]; then
        setupRouterEthernet $routerEthMode $routerName $wifiSSID $wifiPASS
    fi
fi

# Mesh Mode
[[ $request == "micromesh" ]] && setupMeshEthernet $meshEthMode $callsign $nodeID $adminPASS $nodeCH $nodeSSID
    

# FINISHED SETUP
echo "setting installed flag"
touch /var/www/flags/.installed

# Set Timezone to EST
echo "setting timezone"
timedatectl set-timezone EST


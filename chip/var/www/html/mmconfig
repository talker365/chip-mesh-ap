#!/bin/bash 

<<Interface_Modes

 Interface: wlan1 = AP for all modes.

 Parameters: type, Callsign, NodeId, AdminPassword, NodeCH, Eth0Mode, RouterName, WifiSSID, WifiPassword, Eth0Use, apSSID, apPASS, apCH, nodeSSID

Interface_Modes

#---[ GLOBAL VARIABLES ]--------------------------------------------------------------

defaultWLAN=wlan1
defaultLAN=eth0
defaultInterfaceDHCP=$defaultWLAN
defaultInterfaceGateway=$defaultLAN

#---[ FUNCTIONS ]---------------------------------------------------------------------

createADHOC() {

	sudo iwconfig wlan1 mode ad-hoc
	sudo iwconfig wlan1 channel $nodeCH 
	sudo iwconfig wlan1 essid $nodeSSID
	sudo iwconfig wlan1 key off
	sudo iwconfig wlan1 rate auto

	MACID=`cat /sys/class/net/wlan1/address`
	MAC4=`echo $MACID | cut -d : -f 4 `
	MAC5=`echo $MACID | cut -d : -f 5 `
	MAC6=`echo $MACID | cut -d : -f 6 `
	ip2=`printf %d 0x$MAC4 `
	ip3=`printf %d 0x$MAC5 `
	ip4=`printf %d 0x$MAC6 `
	net=10
	nodeIP=$net.$ip2.$ip3.$ip4

	# add to /etc/network/interfaces
	sudo echo "" > /etc/network/interfaces
	sudo echo "# Created by VDN Scripts... Do not edit directly, changes will be lost !" >> /etc/network/interfaces
	sudo echo -e "\nauto lo" >> /etc/network/interfaces
	sudo echo -e "iface lo inet loopback" >> /etc/network/interfaces
	sudo echo -e "\nauto eth0" >> /etc/network/interfaces
	sudo echo -e "iface eth0 inet dhcp" >> /etc/network/interfaces
	sudo echo -e "\nauto wlan1" >> /etc/network/interfaces
	sudo echo -e "iface wlan1 inet static " >> /etc/network/interfaces
	sudo echo -e "\taddress $nodeIP" >> /etc/network/interfaces
	sudo echo -e "\tnetmask 255.0.0.0 " >> /etc/network/interfaces
	sudo echo -e "\twireless-channel $nodeCH " >> /etc/network/interfaces
	sudo echo -e "\twireless-essid $nodeSSID" >> /etc/network/interfaces
	sudo echo -e "\twireless-mode ad-hoc " >> /etc/network/interfaces
	sudo echo -e "iface default inet dhcp" >> /etc/network/interfaces
}


createAP() {

	# Configure the WiFi access point on wlan1
	sudo echo "interface=$defaultWLAN" > /etc/hostapd.conf
	sudo echo "driver=nl80211" >> /etc/hostapd.conf
	sudo echo "ssid=$apSSID" >> /etc/hostapd.conf
	sudo echo "channel=$apCH" >> /etc/hostapd.conf
	sudo echo "auth_algs=3" >> /etc/hostapd.conf
	sudo echo "max_num_sta=10" >> /etc/hostapd.conf
	sudo echo "wpa=2" >> /etc/hostapd.conf
	sudo echo "wpa_passphrase=$apPASS" >> /etc/hostapd.conf
	sudo echo "wpa_pairwise=TKIP CCMP" >> /etc/hostapd.conf
	sudo echo "rsn_pairwise=CCMP" >> /etc/hostapd.conf
	sudo echo "ctrl_interface=/var/run/hostapd" >> /etc/hostapd.conf

	# Add call to vdn-router
 	sudo echo "" >> /usr/sbin/vdn-router
	sudo echo "# Start the Access Point" >> /usr/sbin/vdn-router
	sudo echo "/usr/sbin/hostapd /etc/hostapd.conf" >> /usr/sbin/vdn-router

	# Restart Services
	sudo /usr/sbin/update-rc.d hostapd disable
	sudo /bin/systemctl daemon-reload
	sudo /bin/systemctl enable hostapd-systemd
	sudo /bin/systemctl start hostapd-systemd
	sudo /bin/systemctl status hostapd-systemd
}


createDHCP() {

	interfaceDHCP=$1		# Interface serving the DHCP
	interfaceGateway=$2		# Interface providing IP and DNS Forwarding
	nodeIP="127.20.0.1"
	# Set up a static IP for the AP(accesspoint)
	echo "adding $interfaceDHCP to /etc/network/interfaces"

    ifconfig $interfaceDHCP $nodeIP
    sudo echo "" > /etc/network/interfaces
    sudo echo "# Created by VDN Scripts... Do not edit directly, changes will be lost !" >> /etc/network/interfaces
    sudo echo "# automatically re-created during install & updates" >> /etc/network/interfaces
    sudo echo "auto lo" >> /etc/network/interfaces
    sudo echo -e "iface lo inet loopback\n" >> /etc/network/interfaces
	sudo echo "auto $interfaceDHCP" >> /etc/network/interfaces
	sudo echo "iface $interfaceDHCP inet static" >> /etc/network/interfaces
	sudo echo "    address 172.20.0.1" >> /etc/network/interfaces
	sudo echo "    netmask 255.255.255.0" >> /etc/network/interfaces

	# Restart the hosting interface:
	echo "spinning down $interfaceDHCP"
	sudo ifdown $interfaceDHCP
	echo "spinning up $interfaceDHCP"
	sudo ifup $interfaceDHCP

	# Create Dnsmasq & Restart the DHCP server
	echo "Writing to /etc/dnsmasq.d/access-point.conf"
  	sudo rm -r /etc/dnsmasq.d/*.conf
 	sudo echo "" > /etc/dnsmasq.d/access-point.conf
	sudo echo "# Created by VDN Scripts... Do not edit directly, changes will be lost !" >> /etc/dnsmasq.d/access-point.conf
	sudo echo -e "\ninterface=$interfaceDHCP" >> /etc/dnsmasq.d/access-point.conf
	sudo echo -e "\nexcept-interface=$interfaceGateway" >> /etc/dnsmasq.d/access-point.conf
	sudo echo -e "\ndhcp-range=172.20.0.100,172.20.0.250,1h" >> /etc/dnsmasq.d/access-point.conf

	echo "restarting dnsmasq"
	sudo /etc/init.d/dnsmasq restart 
}


createHosts()
{

	# Update host file and hostname
	sudo echo "#Created by VDN Scripts. Do not edit !!!" > /etc/hosts
	sudo echo "127.0.0.1 localhost" >> /etc/hosts
	sudo echo "$nodeIP $newHostName" >> /etc/hosts
	sudo echo "::1 localhost ip6-localhost ip6-loopback" >> /etc/hosts
	sudo echo "ff02::1 ip6-allnodes" >> /etc/hosts
	sudo echo "ff02::2 ip6-allrouters" >> /etc/hosts
}


createIP() {

	#Create IP Address for IFACE based on MAC Address
   	MACID=`cat /sys/class/net/$1/address`
	MAC4=`echo $MACID | cut -d : -f 4 `
	MAC5=`echo $MACID | cut -d : -f 5 `
	MAC6=`echo $MACID | cut -d : -f 6 `
   	ip1=10
   	ip2=`printf %d 0x$MAC4 `
	ip3=`printf %d 0x$MAC5 `
	ip4=`printf %d 0x$MAC6 `
    [ $1 == "eth0" ] && lanIP=$ip1.$ip3.$ip4."1"    && ifconfig $1 $lanIP && dhcpStart=$ip1.$ip3.$ip4 && echo "lanIP=$lanIP"
    [ $1 == "wlan1" ] && nodeIP=$ip1.$ip2.$ip3.$ip4 && ifconfig $1 $nodeIP && echo "nodeIP=$nodeIP"
}


createOLSR() {

	# Create the OLSRD Config File
	sudo cp /etc/default/olsrd.conf.vdn /etc/olsrd/olsrd.conf
	sudo sed -i.bak "s/.*MainIp.*/MainIp $nodeIP/" /etc/olsrd/olsrd.conf
	sudo sed -i.bak "s/.*Interface.*/Interface \"wlan1\"/" /etc/olsrd/olsrd.conf
	sudo sed -i.bak "s/.*PlParam \"name\".*/    PlParam \"name\" \"$nodeID\"/" /etc/olsrd/olsrd.conf
	#sudo sed -i.bak "s/.*#   0.0.0.0      0.0.0.0.*/$INET_ADDRESS  255.255.255.255/" /etc/olsrd/olsrd.conf
}


createRouter() {
	routerSource=$1
	routerDestination=$2
	sudo echo "#!/bin/bash" > /usr/sbin/vdn-router
 	sudo echo "" >> /usr/sbin/vdn-router
	sudo echo "# Make sure interface $routerSource is up" >> /usr/sbin/vdn-router
	sudo echo "ifdown $routerSoure" >> /usr/sbin/vdn-router
	sudo echo "ifup $routerSource" >> /usr/sbin/vdn-router
	sudo echo "" >> /usr/sbin/vdn-router
	sudo echo "# Enable DNS forwarding" >> /usr/sbin/vdn-router
	sudo echo "sysctl -w net.ipv4.ip_forward=1" >> /usr/sbin/vdn-router
	sudo echo "" >> /usr/sbin/vdn-router
	sudo echo "# Enable NAT" >> /usr/sbin/vdn-router
	sudo echo "iptables -t nat -A POSTROUTING -o $routerDestination -j MASQUERADE" >> /usr/sbin/vdn-router
}


connectWifi() {
	# Connect to Wifi
	echo "disconnecting any existing connections on $defaultWLAN"
	sudo nmcli dev disconnect $defaultWLAN 2>&1
	echo "connecting to WiFi ($wifiSSID) on $defaultWLAN"
	sudo nmcli device wifi connect $wifiSSID password $wifiPASS ifname $defaultWLAN 2>&1
}


updateDnsmasq() {
	# update dnsmasq
	# Change nodeIP to Eth0's IP
	sudo cp /etc/default/dnsmasq.vdn /etc/default/dnsmasq
#	sudo sed -i.bak "s/.*dhcp-option=3.*/dhcp-option=3,$lanIP/" /etc/dnsmasq.d/mesh-node.conf
#	sudo sed -i.bak "s/.*dhcp-range=.*/dhcp-range=$dhcpStart.100,$dhcpStart.105,255.255.255.0,24H/" /etc/dnsmasq.d/mesh-node.conf
#    sudo sed -i.bak "s|#address=/localnode.*|address=/localnode/$lanIP|" /etc/dnsmasq.d/mesh-node.conf
#	sudo sed -i.bak "s|.*address=/node-id.*|address=/$nodeID/$nodeIP|" /etc/dnsmasq.d/mesh-node.conf

	# reset networking.
#	sudo systemctl daemon-reload

	# Packet masquerading - /etc/rc.local
#	sudo sed -i.bak "s/.*to-source.*/iptables -t nat -A POSTROUTING -o wlan1 -j SNAT --to-source $lanIP/" /etc/rc.local
	sudo /etc/./rc.local
}

#---[ MAIN ]----------------------------------------------------------------------------------

clear

if [[ $# -lt 1 ]]; then echo "invalid or no parameters used !"; exit 1; fi

request=$1

if [[ $request == "check" ]]; then 
	if [[ $2 == "installed" ]]; then [ -e "/var/www/html/.installed" ] && echo "TRUE" || echo "FALSE"; fi
	if [[ $2 == "ethernet" ]]; then [ -d "/sys/class/net/eth0" ] && echo "TRUE" || echo "FALSE"; fi
	exit 0
fi

if [[ $request == "update" ]]; then 
 shift
  while [ $# -gt 0 ]
    do
        case "$1" in

        apName )
          #Change Router Name
          echo $2 > /etc/hostname
          sudo sed -i.bak "s/.*127.0.0.1 localhost.*/127.0.0.1 localhost $2/" /etc/hosts
          shift; shift;
        ;;

        meshName )
          #Change Router Name
          echo
          #echo $2 > /etc/hostname
          #sudo sed -i.bak "s/.*127.0.0.1 localhost.*/127.0.0.1 localhost $2/" /etc/hosts
          #shift; shift;
        ;;

        adminPASS )
          #Change admin password
          echo $2 > /var/www/html/.password
          shift; shift;
        ;;

        apPASS )
          #Change access point password
          sudo sed -i.bak "s/.*wpa_passphrase=.*/wpa_passphrase=$2/" /etc/hostapd.conf
          shift; shift;
        ;;

        apSSID )
          #update ssid
          sudo sed -i.bak "s/.*ssid=.*/ssid=$2/" /etc/hostapd.conf
          shift; shift;
        ;;

        meshSSID )
          #update ssid
          echo
          #sudo sed -i.bak "s/.*ssid=.*/ssid=$2/" /etc/hostapd.conf
          #shift; shift;
        ;;

        apChannel )
         #update channel
         sudo sed -i.bak "s/.*channel=.*/channel=$2/" /etc/hostapd.conf
        shift; shift;
        ;;

        meshChannel )
         #update channel
         echo
         #sudo sed -i.bak "s/.*channel=.*/channel=$2/" /etc/hostapd.conf
        #shift; shift;
        ;;

        esac
   done
   # Update any required services.
   systemctl restart hostapd-systemd
 exit 0
fi

# Remove existing Flags 
[ -f "/var/www/flags/.installed" ] && rm /var/www/flags/.installed
[ -f "/var/www/flags/.micromesh" ] && rm /var/www/flags/.micromesh
[ -f "/var/www/flags/.microrouter" ] && rm /var/www/flags/.microrouter

# Get all Parameter Values
callsign=$2
nodeID=$3
adminPASS=$4
nodeCH=$5
meshEthMode=$6
shift; shift; shift; shift; shift; shift;
routerName=$1
wifiSSID=$2
wifiPASS=$3
routeEthMode=$4
apSSID=$5
apPASS=$6
apCH=$7
nodeSSID=$8

# Router Mode
if [[ $request == "microrouter" ]]; then  
  
	newHostName=$routerName
	echo "Router [$routerName]"
	echo "Wifi [$wifiSSID]"
	echo "WifiPassword [$wifiPASS]"
	echo "Eth Mode [$routerEthMode]"
	echo "AP [$apSSID]"
	echo "AP-Pass [$apPASS]"
	echo "AP-CH [$apCH]"
	echo ""

	if [[ $routeEthMode == "ETH" ]]; then 
		echo "SETUP AccessPoint on $defaultWLAN with IP Forwarding to $defaultLAN"
		createDHCP $defaultWLAN $defaultLAN
		createRouter $defaultWLAN $defaultLAN
		createAP
	fi
	if [[ $routeEthMode == "WLAN" ]]; then 
		defaultWLAN=wlan0
		echo "Setting up DHCP and IP Forwarding to $defaultLAN"
		createDHCP $defaultLAN $defaultWLAN
		createRouter $defaultLAN $defaultWLAN
		echo "CONNECT to WiFi Hotspot using $defaultWLAN"
		connectWifi

	    # Start Service
	    sudo /bin/systemctl daemon-reload
    	sudo /bin/systemctl enable router-systemd
	    sudo /bin/systemctl start router-systemd
    	sudo /bin/systemctl status router-systemd
	fi

	# Set installation type flag for status page.
	sudo touch /var/www/flags/.microrouter

fi

# Mesh Mode
if [[ $request == "micromesh" ]]; then 

	defaultWLAN=wlan1
	newHostName=$nodeID
	echo "Callsign [$callsign]"
	echo "NodeID [$nodeID]"
	echo "Admin Password [$adminPASS]"
	echo "Node Channel [$nodeCH]"
	echo "Node Ethernet Mode [$meshEthMode]"
	echo "Node SSID [$nodeSSID]"
	echo

	if [[ $meshEthMode == "LAN" ]]; then 
	    echo "SETUP MeshAccessPoint on $defaultWLAN with IP Forwarding to $defaultLAN"
	    createIP wlan1
	    createIP eth0
	    createADHOC
	    createOLSR
	fi

	if [[ $meshEthMode == "WLAN" ]]; then 
		echo "Setting up DHCP and IP Forwarding to $defaultLAN"
	### Do Something Here
		echo "CONNECT to WiFi Hotspot using $defaultWLAN"
	fi

	# Set installation type flag for status page.
	sudo touch /var/www/flags/.micromesh
fi

# FINISHED SETUP
echo "setting installed flag"
sudo touch /var/www/flags/.installed

# Set Timezone to EST
echo "setting timezone"
sudo timedatectl set-timezone EST

# Change Hostname, no longer chip
echo "running createHosts()"
createHosts

echo "setting hostname to $newHostName"
echo $newHostName > /etc/hostname



#!/bin/bash 

<<Interface_Modes

 Interface: wlan1 = AP for all modes.

 Parameters: type, Callsign, NodeId, AdminPassword, NodeCH, Eth0Mode, RouterName, WifiSSID, WifiPassword, Eth0Use, apSSID, apPASS, apCH, nodeSSID

Interface_Modes

#---[ FUNCTIONS ]---------------------------------------------------------------------

createAP() {
# Set up a static IP for the AP(accesspoint)
sudo echo "" >> /etc/network/interfaces
sudo echo "auto wlan1" >> /etc/network/interfaces
sudo echo "iface wlan1 inet static" >> /etc/network/interfaces
sudo echo "    address 172.20.0.1" >> /etc/network/interfaces
sudo echo "    netmask 255.255.255.0" >> /etc/network/interfaces

# Restart the wlan1 interface:
sudo ifdown wlan1
sudo ifup wlan1

# Restart the DHCP server
sudo /etc/init.d/dnsmasq restart 

# Configure the WiFi access point on wlan1
sudo echo "interface=wlan1" > /etc/hostapd.conf
sudo echo "driver=nl80211" >> /etc/hostapd.conf
sudo echo "ssid=$apSSID" >> /etc/hostapd.conf
sudo echo "channel=$apCH" >> /etc/hostapd.conf
sudo echo "auth_algs=3" >> /etc/hostapd.conf
sudo echo "max_num_sta=10" >> /etc/hostapd.conf
sudo echo "wpa=2" >> /etc/hostapd.conf
sudo echo "wpa_passphrase=$apPASS" >> /etc/hostapd.conf
sudo echo "wpa_pairwise=TKIP CCMP" >> /etc/hostapd.conf
sudo echo "rsn_pairwise=CCMP" >> /etc/hostapd.conf
sudo echo "ctrl_interface=/var/run/hostapd" >> /etc/hostapd.conf

# Restart Services
sudo /usr/sbin/update-rc.d hostapd disable
sudo /bin/systemctl daemon-reload
sudo /bin/systemctl enable hostapd-systemd
sudo /bin/systemctl start hostapd-systemd
sudo /bin/systemctl status hostapd-systemd
}

connectWifi() {
# Connect to Wifi
sudo nmcli dev disconnect wlan1 2>&1
sudo nmcli device wifi connect $wifiSSID password $wifiPASS ifname wlan1 2>&1
}

createADHOC() {
sudo echo "#!/bin/bash" > /usr/sbin/olsrd-adhoc-setup
sudo echo "# Auto created by Valley Digital Network Installer." >> /usr/sbin/olsrd-adhoc-setup
sudo echo "# Kill olsrd if running..." >> /usr/sbin/olsrd-adhoc-setup
sudo echo 'if (( $(ps -A | grep olsrd | wc -l) > 1 )); then killall -9 olsrd; fi' >> /usr/sbin/olsrd-adhoc-setup
sudo echo "ip link set wlan1 down" >> /usr/sbin/olsrd-adhoc-setup
sudo echo "sleep 1" >> /usr/sbin/olsrd-adhoc-setup
sudo echo "iwconfig wlan1 mode ad-hoc" >> /usr/sbin/olsrd-adhoc-setup
sudo echo "iwconfig wlan1 channel $nodeCH" >> /usr/sbin/olsrd-adhoc-setup
sudo echo "iwconfig wlan1 essid $nodeSSID" >> /usr/sbin/olsrd-adhoc-setup
sudo echo "iwconfig wlan1 key off" >> /usr/sbin/olsrd-adhoc-setup
sudo echo "iwconfig wlan1 rate auto" >> /usr/sbin/olsrd-adhoc-setup
sudo echo "ip link set wlan1 up" >> /usr/sbin/olsrd-adhoc-setup
sudo echo "# Lets Calculate the IP Address via Mac Address" >> /usr/sbin/olsrd-adhoc-setup
sudo echo "sleep 1" >> /usr/sbin/olsrd-adhoc-setup
sudo echo 'echo "Setting up IP address: "' >> /usr/sbin/olsrd-adhoc-setup
sudo echo "MACID=`cat /sys/class/net/wlan1/address`" >> /usr/sbin/olsrd-adhoc-setup
sudo echo 'MAC4=`echo $MACID | cut -d : -f 4 `' >> /usr/sbin/olsrd-adhoc-setup
sudo echo 'MAC5=`echo $MACID | cut -d : -f 5 `' >> /usr/sbin/olsrd-adhoc-setup
sudo echo 'MAC6=`echo $MACID | cut -d : -f 6 `' >> /usr/sbin/olsrd-adhoc-setup
sudo echo 'ip2=`printf %d 0x$MAC4 `' >> /usr/sbin/olsrd-adhoc-setup
sudo echo 'ip3=`printf %d 0x$MAC5 `' >> /usr/sbin/olsrd-adhoc-setup
sudo echo 'ip4=`printf %d 0x$MAC6 `' >> /usr/sbin/olsrd-adhoc-setup
sudo echo 'net=10' >> /usr/sbin/olsrd-adhoc-setup
sudo echo 'nodeIP=$net.$ip2.$ip3.$ip4 ' >> /usr/sbin/olsrd-adhoc-setup
sudo echo 'echo -e $nodeIP"\n"' >> /usr/sbin/olsrd-adhoc-setup
sudo echo "ip link set wlan1 down" >> /usr/sbin/olsrd-adhoc-setup
sudo echo "iwconfig wlan1 essid $nodeSSID" >> /usr/sbin/olsrd-adhoc-setup
sudo echo 'ip address replace $nodeIP""/16 broadcast 255.255.255.255 dev wlan1 ' >> /usr/sbin/olsrd-adhoc-setup
sudo echo 'if (( $(cat /sys/class/net/wlan1/operstate) == "up" )); then olsrd -f /etc/olsrd/olsrd.conf; else echo "wlan1 Failed to Start !!!"; fi' >> /usr/sbin/olsrd-adhoc-setup
sudo chmod 755 /usr/sbin/olsrd-adhoc-setup

MACID=`cat /sys/class/net/wlan1/address`
MAC4=`echo $MACID | cut -d : -f 4 `
MAC5=`echo $MACID | cut -d : -f 5 `
MAC6=`echo $MACID | cut -d : -f 6 `
ip2=`printf %d 0x$MAC4 `
ip3=`printf %d 0x$MAC5 `
ip4=`printf %d 0x$MAC6 `
net=10
nodeIP=$net.$ip2.$ip3.$ip4

# add to /etc/network/interfaces
sudo echo "" > /etc/network/interfaces
sudo echo "# Created by VDN Scripts... Do not edit directly, changes will be lost !" >> /etc/network/interfaces
sudo echo -e "\nauto lo" >> /etc/network/interfaces
sudo echo -e "iface lo inet loopback" >> /etc/network/interfaces
sudo echo -e "\nauto eth0" >> /etc/network/interfaces
sudo echo -e "iface eth0 inet dhcp" >> /etc/network/interfaces
sudo echo -e "\nauto wlan1 " >> /etc/network/interfaces
sudo echo -e "iface wlan1 inet static " >> /etc/network/interfaces
sudo echo -e "\taddress $nodeIP" >> /etc/network/interfaces
sudo echo -e "\tnetmask 255.0.0.0 " >> /etc/network/interfaces
sudo echo -e "\twireless-channel $nodeCH " >> /etc/network/interfaces
sudo echo -e "\twireless-essid $nodeSSID" >> /etc/network/interfaces
sudo echo -e "\twireless-mode ad-hoc " >> /etc/network/interfaces
}

createHosts()
{
# Set host file and hostname
sudo echo "#Created by VDN Scripts. Do not edit !!!" > /etc/hosts
sudo echo "127.0.0.1 localhost" >> /etc/hosts
sudo echo -e "$nodeIP $newHostName" >> /etc/hosts
sudo echo "::1 localhost ip6-localhost ip6-loopback" >> /etc/hosts
sudo echo "ff02::1 ip6-allnodes" >> /etc/hosts
sudo echo "ff02::2 ip6-allrouters" >> /etc/hosts
}

createOLSR() {

# Get Wired Ethernet Address
if [ -d "/sys/class/net/eth0" ]; then
  INET_IFACE=eth0
  i="0"
  while [ $i -lt 5 ]; do
    INET_ADDRESS=`ifconfig ${INET_IFACE} | awk '/inet addr/ {split ($2,A,":"); print A[2]}'`

   if [ "$INET_ADDRESS" != "" ];then
  IP1=`echo $INET_ADDRESS | cut -d . -f 1`
  IP2=`echo $INET_ADDRESS | cut -d . -f 2`
  IP3=`echo $INET_ADDRESS | cut -d . -f 3`
  INET_ADDRESS=$IP1.$IP2.$IP3."0"
      break
    else
    # restart the interface
      sleep 2
      echo "Restarting interface: $INET_IFACE"
      ifdown ${INET_IFACE}
      ifup ${INET_IFACE}
      (( i++ ))
    fi
  done
fi

if [ "$INET_ADDRESS" == "" ]; then INET_ADDRESS="0.0.0.0"; fi

# Packet masquerading - /etc/rc.local
#sudo sed -i.bak "s/.*to-source.*/iptables -t nat -A POSTROUTING -o wlan1 -j SNAT --to-source $nodeIP/" /etc/rc.local
#sudo echo "exit 0" >> /etc/rc.local


# Create the OLSRD Config File
sudo cp /etc/olsrd/olsrd.conf.vdn /etc/olsrd/olsrd.conf
sudo sed -i.bak "s/.*MainIp.*/MainIp $nodeIP/" /etc/olsrd/olsrd.conf
sudo sed -i.bak "s/.*Interface.*/Interface \"wlan1\"/" /etc/olsrd/olsrd.conf
sudo sed -i.bak "s/.*PlParam \"name\".*/    PlParam \"name\" \"$nodeID\"/" /etc/olsrd/olsrd.conf
sudo sed -i.bak "s/.*#   0.0.0.0      0.0.0.0.*/$INET_ADDRESS  255.255.255.255/" /etc/olsrd/olsrd.conf

# edit OLSRD boot options
sudo sed -i.bak "s/.*#START_OLSRD=.*/START_OLSRD=\"YES\"/" /etc/default/olsrd
sudo sed -i.bak "s/.*#SETUP_ADHOC=.*/SETUP_ADHOC=\"YES\"/" /etc/default/olsrd
sudo sed -i.bak "s/.*MESH_IF=.*/MESH_IF=$nodeiface/" /etc/default/olsrd
sudo sed -i.bak "s/.*channel=.*/channel=$nodeCH/" /etc/default/olsrd
sudo sed -i.bak "s/.*ssid=.*/ssid=$nodeSSID/" /etc/default/olsrd
sudo sed -i.bak "s/.*bssid=.*/#bssid=/" /etc/default/olsrd
sudo olsrd-adhoc-setup
sudo ifconfig wlan1 inet $nodeIP broadcast 255.255.255.255

sudo systemctl daemon-reload

# update dnsmasq
#sudo mv /etc/dnsmasq.vdn /etc/dnsmasq.conf

# reset networking.
#sudo /etc/init.d/networking restart
}

#---[ MAIN ]----------------------------------------------------------------------------------

clear

request=$1

if [[ $request == "check" ]]; then 
   if [[ $2 == "installed" ]]; then [ -e "/var/www/html/.installed" ] && echo "TRUE" || echo "FALSE"; fi
   if [[ $2 == "ethernet" ]]; then [ -d "/sys/class/net/eth0" ] && echo "TRUE" || echo "FALSE"; fi
fi

# Remove existing Flags 
[ -f "/var/www/flags/.installed" ] && rm /var/www/flags/.installed || echo "Install flag didn't exist"
[ -f "/var/www/flags/.micromesh" ] && rm /var/www/flags/.micromesh || echo "Micromesh flag didn't exist"

# Get all Parameter Values
  callsign=$2
  nodeID=$3
  adminPASS=$4
  nodeCH=$5
  nodeEthMode=$6
  shift; shift; shift; shift; shift; shift;
  routerName=$1
  wifiSSID=$2
  wifiPASS=$3
  routeEthMode=$4
  apSSID=$5
  apPASS=$6
  apCH=$7
  nodeSSID=$8

# Router Mode
if [[ $request == "microrouter" ]]; then  
  
  newHostName=$routerName
  echo "Router [$routerName]"
  echo "Wifi [$wifiSSID]"
  echo "WifiPassword [$wifiPASS]"
  echo "Eth Mode [$routeEthMode]"
  echo "AP [$apSSID]"
  echo "AP-Pass [$apPASS]"
  echo "AP-CH [$apCH]"
  echo

if [[ $routeEthMode == "WAN" ]]; then 
  echo "SETUP IP Forwarding for ETH0"
fi

  createAP
  #connectWifi

# Set installation type flag for status page.
sudo touch /var/www/html/.microrouter

fi

# Mesh Mode
if [[ $request == "micromesh" ]]; then 

  newHostName=$nodeID
  echo "Callsign [$callsign]"
  echo "NodeID [$nodeID]"
  echo "Admin Password [$adminPASS]"
  echo "Node Channel [$nodeCH]"
  echo "Node Ethernet Mode [$nodeEthMode]"
  echo "Node SSID [$nodeSSID]"
  echo

  createADHOC
  createOLSR

# Update resolv.conf file.
if [ -L /etc/resolv.conf ]; then
    rm -f /etc/resolv.conf
    touch /etc/resolv.conf
fi

sudo bash -c "echo '# Generated by VDN Scripts, do not edit' > /etc/resolv.conf"
sudo bash -c "echo 'nameserver 127.0.0.1' >> /etc/resolv.conf"
sudo bash -c "echo 'nameserver 8.8.8.8' >> /etc/resolv.conf"
sudo chgrp www-data /etc/resolv.conf
sudo chmod g+w /etc/resolv.conf

# Set installation type flag for status page.
sudo touch /var/www/flags/.micromesh
fi

# FINISHED SETUP
sudo touch /var/www/flags/.installed

# Set Timezone to EST
sudo timedatectl set-timezone EST

# Change Hostname, no longer chip
echo $newHostName > /etc/hostname
createHosts



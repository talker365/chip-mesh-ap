#!/bin/bash

# This script will install the VDN Chip Mesh Firmware.  This script needs to be executed
# remotely as root.

# 1) Untar installation packages
cd /tmp/vdn
tar -xf packages.tar

# 2) Install dnsmasq:
dpkg -G -i dnsmasq_2.72-3+deb8u1_all.deb

# 2) Install apache:
dpkg -G -i liberror-perl_0.17-1.1_all.deb
dpkg -G -i libcurl3-gnutls_7.38.0-4+deb8u5_armhf.deb


dpkg -G -i apache2-data_2.4.10-10+deb8u7_all.deb
dpkg -G -i apache2_2.4.10-10+deb8u7_armhf.deb

# 2) Install git:
dpkg -G -i git_1%3a2.1.4-2.1+deb8u2_armhf.deb
dpkg -G -i git-man_2.1.4-2.1+deb8u2_all.deb
dpkg -G -i git_2.1.4-2.1+deb8u2_armhf.deb

dpkg -G -i rsync_3.1.1-3_armhf.deb
dpkg -G -i ssl-cert_1.0.35_all.deb


# 4) Download the kernel mods for enabling NAT
cd /lib/modules/4.4.13-ntc-mlc/kernel/net/ipv4/netfilter
cp /tmp/vdn/ipt_MASQUERADE.ko .
cp /tmp/vdn/nf_nat_masquerade_ipv4.ko .
depmod
cd /tmp/vdn

# 5) Create a configure file . With this eth0 becomes a way to connect to a network, and wlan1 becomes CHIPs access point.
# Add some lines in order to transfer ethernet to wlan1
# We also want to set the range and time of leases:

echo "#If you want dnsmasq to listen for DHCP and DNS requests only on" > /etc/dnsmasq.d/access_point.conf
echo "#specified interfaces (and the loopback) give the name of the" >> /etc/dnsmasq.d/access_point.conf
echo "#interface (eg eth0) here." >> /etc/dnsmasq.d/access_point.conf
echo "#Repeat the line for more than one interface." >> /etc/dnsmasq.d/access_point.conf
echo "interface=wlan1" >> /etc/dnsmasq.d/access_point.conf
echo "#Or you can specify which interface not to listen on" >> /etc/dnsmasq.d/access_point.conf
echo "except-interface=eth0 " >> /etc/dnsmasq.d/access_point.conf
echo "" >> /etc/dnsmasq.d/access_point.conf
echo "#Uncomment this to enable the integrated DHCP server, you need" >> /etc/dnsmasq.d/access_point.conf
echo "#to supply the range of addresses available for lease and optionally" >> /etc/dnsmasq.d/access_point.conf
echo "#a lease time. If you have more than one network, you will need to" >> /etc/dnsmasq.d/access_point.conf
echo "#repeat this for each network on which you want to supply DHCP" >> /etc/dnsmasq.d/access_point.conf
echo "#service." >> /etc/dnsmasq.d/access_point.conf
echo "dhcp-range=172.20.0.100,172.20.0.250,1h " >> /etc/dnsmasq.d/access_point.conf

# 6) Set up a static IP for the AP(accesspoint)
echo "" >> /etc/network/interfaces
echo "auto wlan1" >> /etc/network/interfaces
echo "iface wlan1 inet static" >> /etc/network/interfaces
echo "    address 172.20.0.1" >> /etc/network/interfaces
echo "    netmask 255.255.255.0" >> /etc/network/interfaces

# 7) Restart the wlan1 interface:
ifdown wlan1
ifup wlan1

# 8) Restart the DHCP server
/etc/init.d/dnsmasq restart  

###  # 9) Turn on DNS forwarding
###  sysctl -w net.ipv4.ip_forward=1

###  # 10) Setup NAT to route through eth0
###  iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

# 11) Configure the WiFi access point on wlan1
echo "interface=wlan1" > /etc/hostapd.conf
echo "driver=nl80211" >> /etc/hostapd.conf
echo "ssid=aredn-vdn-AP" >> /etc/hostapd.conf
echo "channel=1" >> /etc/hostapd.conf
echo "auth_algs=3" >> /etc/hostapd.conf
echo "max_num_sta=10" >> /etc/hostapd.conf
echo "wpa=2" >> /etc/hostapd.conf
echo "wpa_passphrase=123456789" >> /etc/hostapd.conf
echo "wpa_pairwise=TKIP CCMP" >> /etc/hostapd.conf
echo "rsn_pairwise=CCMP" >> /etc/hostapd.conf
echo "ctrl_interface=/var/run/hostapd" >> /etc/hostapd.conf

# 12) Create script for handling service spin up
echo "#!/bin/bash" > /usr/sbin/vdn-router
echo "" >> /usr/sbin/vdn-router
echo "# Make sure interface is up" >> /usr/sbin/vdn-router
echo "ifdown wlan1" >> /usr/sbin/vdn-router
echo "ifup wlan1" >> /usr/sbin/vdn-router
echo "" >> /usr/sbin/vdn-router
echo "# Enable DNS forwarding" >> /usr/sbin/vdn-router
echo "sysctl -w net.ipv4.ip_forward=1" >> /usr/sbin/vdn-router
echo "" >> /usr/sbin/vdn-router
echo "# Enable NAT" >> /usr/sbin/vdn-router
echo "iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE" >> /usr/sbin/vdn-router
echo "" >> /usr/sbin/vdn-router
echo "# Start the Access Point" >> /usr/sbin/vdn-router
echo "/usr/sbin/hostapd /etc/hostapd.conf" >> /usr/sbin/vdn-router

# 13) Make the spin up script executable
chmod +x /usr/sbin/vdn-router

# 14) Configure it to create AP on boot.
echo "[Unit]" > /lib/systemd/system/hostapd-systemd.service
echo "Description=hostapd service" >> /lib/systemd/system/hostapd-systemd.service
echo "Wants=network-manager.service" >> /lib/systemd/system/hostapd-systemd.service
echo "After=network-manager.service" >> /lib/systemd/system/hostapd-systemd.service
echo "Wants=module-init-tools.service" >> /lib/systemd/system/hostapd-systemd.service
echo "After=module-init-tools.service" >> /lib/systemd/system/hostapd-systemd.service
echo "ConditionPathExists=/etc/hostapd.conf" >> /lib/systemd/system/hostapd-systemd.service
echo "" >> /lib/systemd/system/hostapd-systemd.service
echo "[Service]" >> /lib/systemd/system/hostapd-systemd.service
echo "ExecStart=/usr/sbin/vdn-router" >> /lib/systemd/system/hostapd-systemd.service
echo "" >> /lib/systemd/system/hostapd-systemd.service
echo "[Install]" >> /lib/systemd/system/hostapd-systemd.service
echo "WantedBy=multi-user.target" >> /lib/systemd/system/hostapd-systemd.service

# 15) Disable the existing systemV script for booting hostapd:
update-rc.d hostapd disable  

# 16) Setup the systemd service
systemctl daemon-reload 
systemctl enable hostapd-systemd 

# 17) Start AP:
systemctl start hostapd-systemd 





